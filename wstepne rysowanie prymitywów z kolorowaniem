#include <iostream>
#include <allegro5/allegro.h>
#include <allegro5/allegro_primitives.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <cstdlib>
#include <ctime>

const int SCREEN_WIDTH = 800;
const int SCREEN_HEIGHT = 600;

int main() {
    // Inicjalizacja Allegro
    if (!al_init()) {
        std::cerr << "Failed to initialize Allegro!" << std::endl;
        return -1;
    }

    // Inicjalizacja modułów Allegro
    if (!al_init_primitives_addon()) {
        std::cerr << "Failed to initialize Allegro primitives addon!" << std::endl;
        return -1;
    }

    // Inicjalizacja modułu obsługi klawiatury
    if (!al_install_keyboard()) {
        std::cerr << "Failed to initialize keyboard!" << std::endl;
        return -1;
    }

    // Inicjalizacja modułu obsługi fontów
    al_init_font_addon();

    // Inicjalizacja modułu obsługi TrueType Fonts
    al_init_ttf_addon();

    // Inicjalizacja myszki
    al_install_mouse();

    // Inicjalizacja ekranu
    ALLEGRO_DISPLAY* display = al_create_display(SCREEN_WIDTH, SCREEN_HEIGHT);
    if (!display) {
        std::cerr << "Failed to create display!" << std::endl;
        return -1;
    }

    // Inicjalizacja generatora liczb losowych
    srand(time(NULL));

    // Losowy kolor
    ALLEGRO_COLOR randomColor = al_map_rgb(rand() % 256, rand() % 256, rand() % 256);

    // Zmienna sprawdzająca, czy prostokąt został już narysowany
    bool rectangleDrawn = false;

    // Kolor tła
    ALLEGRO_COLOR background_color = al_map_rgb(0, 0, 0);

    // Główna pętla programu
    while (true) {
        ALLEGRO_EVENT_QUEUE* event_queue = al_create_event_queue();
        al_register_event_source(event_queue, al_get_keyboard_event_source());
        al_register_event_source(event_queue, al_get_mouse_event_source());

        ALLEGRO_EVENT ev;
        al_wait_for_event(event_queue, &ev);

        if (ev.type == ALLEGRO_EVENT_KEY_DOWN) {
            if (ev.keyboard.keycode == ALLEGRO_KEY_K) {
                if (rectangleDrawn) {
                    // Znikanie prostokąta
                    al_clear_to_color(background_color); // Wyczyszczenie ekranu
                    al_flip_display();
                    rectangleDrawn = false;
                }
                else {
                    // Rysowanie prostokąta
                    al_clear_to_color(background_color); // Wyczyszczenie ekranu
                    al_draw_filled_rectangle(250, 250, 500, 350, randomColor);
                    al_flip_display();
                    rectangleDrawn = true;
                }
            }
            else if (ev.keyboard.keycode >= ALLEGRO_KEY_0 && ev.keyboard.keycode <= ALLEGRO_KEY_9) {
                // Obsługa zmiany koloru tła
                int digit = ev.keyboard.keycode - ALLEGRO_KEY_0;
                switch (digit) {
                case 0:
                    background_color = al_map_rgb(60, 60, 60); // Ciemno szary
                    break;
                case 1:
                    background_color = al_map_rgb(0, 255, 0);  // Zielony
                    break;
                case 2:
                    background_color = al_map_rgb(255, 0, 0);  // Czerwony
                    break;
                case 3:
                    background_color = al_map_rgb(0, 0, 255); // Niebieski
                    break;
                case 4:
                    background_color = al_map_rgb(255, 0, 255); // Fioletowy
                    break;
                case 5:
                    background_color = al_map_rgb(255, 255, 0); // Żółty
                    break;
                case 6:
                    background_color = al_map_rgb(0, 0, 0); // Czarny
                    break;
                case 7:
                    background_color = al_map_rgb(255, 150, 0); // Pomarańczowy
                    break;
                case 8:
                    background_color = al_map_rgb(0, 150, 255); // Turkusowy
                    break;
                case 9:
                    background_color = al_map_rgb(150, 150, 150); // Szary
                    break;
                }
                al_clear_to_color(background_color); // Wyczyszczenie ekranu
                al_flip_display();
            }
        }
        else if (ev.type == ALLEGRO_EVENT_MOUSE_AXES) {
            // Współrzędne myszy
            int mouse_x = ev.mouse.x;
            int mouse_y = ev.mouse.y;

            // Wyczyszczenie obszaru poprzednich współrzędnych myszy
            al_draw_filled_rectangle(0, 0, 200, 30, background_color);

            // Wyświetlenie aktualnych współrzędnych myszy w lewym górnym rogu
            al_draw_textf(al_create_builtin_font(), al_map_rgb(255, 255, 255), 10, 10, ALLEGRO_ALIGN_LEFT, "Mysz: (%d, %d)", mouse_x, mouse_y);

            // Przycisk "Wyjście"
            int button_width = 100;
            int button_height = 40;
            int button_x = al_get_display_width(display) - button_width;
            int button_y = al_get_display_height(display) - button_height;

            // Wyczyszczenie obszaru poprzedniego przycisku "Wyjście"
            al_draw_filled_rectangle(button_x, button_y, button_x + button_width, button_y + button_height, background_color);

            // Wyświetlenie przycisku "Wyjście"
            al_draw_filled_rectangle(button_x, button_y, button_x + button_width, button_y + button_height, background_color);
            al_draw_textf(al_create_builtin_font(), al_map_rgb(255, 255, 255), button_x + button_width / 2, button_y + button_height / 2, ALLEGRO_ALIGN_CENTRE, "Wyjscie");

            // Odświeżenie ekranu
            al_flip_display();
        }
        else if (ev.type == ALLEGRO_EVENT_MOUSE_BUTTON_UP) {
            // Sprawdza czy myszka kliknęła w obszar przycisku "Wyjście"
            int button_width = 100;
            int button_height = 40;
            int button_x = al_get_display_width(display) - button_width;
            int button_y = al_get_display_height(display) - button_height;

            if (ev.mouse.x >= button_x && ev.mouse.x <= button_x + button_width &&
                ev.mouse.y >= button_y && ev.mouse.y <= button_y + button_height) {
                break;  // Zamknięcie programu po kliknięciu przycisku "Wyjście"
            }
        }
        else if (ev.type == ALLEGRO_EVENT_DISPLAY_CLOSE) {
            break;
        }

        al_destroy_event_queue(event_queue);
    }

    // Zakończenie programu
    al_destroy_display(display);
    al_uninstall_keyboard();
    return 0;
}
